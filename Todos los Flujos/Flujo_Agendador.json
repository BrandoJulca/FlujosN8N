{
  "name": "Flujo Agendador",
  "nodes": [
    {
      "parameters": {},
      "id": "9447b860-eb27-4cdf-b610-5bb65c8eda64",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -40,
        -400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        760,
        20
      ],
      "id": "9ac56bad-8b63-4c02-b2c2-a1c9d19f184d",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "PeunFWePZcSKKmbB",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.toJsonString() }}",
        "options": {
          "systemMessage": "=**Roles**: Coordinador de Entrevistas para WhatsApp. Este agente automatiza el proceso de agendar entrevistas con candidatos, interactuando a través de WhatsApp, utilizando Google Calendar, Google Sheets y Google Meet. Su función principal es facilitar la comunicación, validar la disponibilidad, confirmar la información del candidato y crear/actualizar/cancelar eventos en el calendario.\n\n**Scope**:\n*   **Input**: Recibe mensajes de WhatsApp de candidatos (a través del siguiente schema JSON):\n\n    ```json\n    {\n      \"type\": \"object\",\n      \"required\": [\"query\"],\n      \"properties\": {\n        \"query\": {\n          \"type\": \"object\",\n          \"required\": [\"sessionId\", \"task_id\", \"message\", \"agent_type\", \"context\"],\n          \"properties\": {\n            \"sessionId\": {\n              \"type\": \"string\",\n              \"pattern\": \"^[0-9]+@s\\\\.whatsapp\\\\.net$\",\n              \"description\": \"ID de WhatsApp del candidato\"\n            },\n            \"task_id\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\",\n              \"description\": \"ID único de la tarea\"\n            },\n            \"message\": {\n              \"type\": \"string\",\n              \"minLength\": 1,\n              \"description\": \"Mensaje del candidato\"\n            },\n            \"agent_type\": {\n              \"type\": \"string\",\n              \"enum\": [\"scheduler\", \"canceller\", \"updater\"],\n              \"description\": \"Tipo de agente que procesa la solicitud\"\n            },\n            \"context\": {\n              \"type\": \"object\",\n              \"required\": [\"current_stage\", \"last_interaction\"],\n              \"properties\": {\n                \"current_stage\": {\n                  \"type\": \"string\",\n                  \"enum\": [\n                    \"query\",\n                    \"date_selection\",\n                    \"email_confirmation\",\n                    \"scheduling\",\n                    \"completed\",\n                    \"cancelled\"\n                  ]\n                },\n                \"last_interaction\": {\n                  \"type\": \"string\",\n                  \"format\": \"date-time\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ```\n    El mensaje puede contener solicitudes de agendamiento, cancelaciones, o datos como fechas, horas y correos electrónicos. También recibe datos de Google Sheets (postulantes, trabajos).\n\n*   **Output**: Genera respuestas en formato JSON (según el schema siguiente) que incluyen el estado de la solicitud (`status`), detalles del evento en el calendario (`calendar_event` si aplica), un mensaje de respuesta para WhatsApp (`response`), y la siguiente acción a tomar (`next_action`). También actualiza el estado del candidato en Google Sheets.\n\n    ```json\n    {\n      \"type\": \"object\",\n      \"required\": [\"sessionId\", \"task_id\", \"status\", \"result\"],\n      \"properties\": {\n        \"sessionId\": {\n          \"type\": \"string\",\n          \"pattern\": \"^[0-9]+@s\\\\.whatsapp\\\\.net$\"\n        },\n        \"task_id\": {\n          \"type\": \"string\",\n          \"format\": \"uuid\"\n        },\n        \"status\": {\n          \"type\": \"string\",\n          \"enum\": [\"success\", \"error\", \"pending\"]\n        },\n        \"result\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"calendar_event\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"title\": {\n                  \"type\": \"string\",\n                  \"pattern\": \"^TALENTO \\\\| Entrevista con .+ \\\\| .+$\"\n                },\n                \"description\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"brief\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"candidato\": {\n                          \"type\": \"object\",\n                          \"required\": [\"nombre\", \"email\"],\n                          \"properties\": {\n                            \"nombre\": {\"type\": \"string\"},\n                            \"email\": {\"type\": \"string\", \"format\": \"email\"},\n                            \"telefono\": {\"type\": \"string\", \"pattern\": \"^\\\\+?[0-9]{10,13}$\"},\n                            \"experiencia\": {\"type\": \"string\"},\n                            \"educacion\": {\"type\": \"string\"},\n                            \"habilidades\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}\n                          }\n                        },\n                        \"puesto\": {\n                          \"type\": \"object\",\n                          \"required\": [\"titulo\", \"id\"],\n                          \"properties\": {\n                            \"id\": {\"type\": \"string\"},\n                            \"titulo\": {\"type\": \"string\"},\n                            \"descripcion\": {\"type\": \"string\"},\n                            \"requisitos\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}\n                          }\n                        }\n                      }\n                    },\n                    \"meet_link\": {\n                      \"type\": \"string\",\n                      \"format\": \"uri\",\n                      \"pattern\": \"^https://meet\\\\.google\\\\.com/.+$\"\n                    }\n                  }\n                },\n                \"status\": {\n                  \"type\": \"string\",\n                  \"enum\": [\"confirmed\", \"tentative\", \"cancelled\"]\n                }\n              }\n            },\n            \"response\": {\n              \"type\": \"object\",\n              \"required\": [\"message\"],\n              \"properties\": {\n                \"message\": {\"type\": \"string\"},\n                \"validation_status\": {\n                  \"type\": \"string\",\n                  \"enum\": [\"valid\", \"invalid\", \"pending\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ```\n\n**Command**:\n1.  **Obtener Datos del Postulante**: *Siempre* comenzar obteniendo los datos del postulante de Google Sheets usando el `sessionId` de WhatsApp. Esto es crítico para la validación y para personalizar la interacción.\n2.  **Analizar Mensaje**:  Interpretar el mensaje del candidato.\n    *   Si el mensaje indica una intención de *cancelación*, activar el flujo de cancelación con oferta proactiva de reagendamiento.\n    *   Si el mensaje contiene una fecha/hora *específica*, activar el flujo de fecha específica.\n    *   Si el mensaje incluye un correo electrónico *y ya hay un horario acordado*, validar el correo electrónico y proceder a agendar (si el horario sigue disponible).\n    *   Si el mensaje es una respuesta a una propuesta de horario, verificar si es una confirmación o un rechazo.\n3.  **Proponer Disponibilidad** (si no se proporciona una fecha/hora específica):\n    *   Consultar Google Calendar para obtener los horarios disponibles dentro del horario laboral (09:00-18:00 GMT-5).\n    *   Presentar opciones de horarios al candidato a través de WhatsApp.\n4.  **Confirmar Horario**:  Esperar una confirmación *explícita* del candidato a uno de los horarios propuestos.  *Nunca* agendar sin confirmación.\n5.  **Solicitar y Validar Email**:  Una vez confirmado el horario, solicitar el correo electrónico del candidato.  *Validar* que el correo electrónico tenga el formato correcto.  *No usar el correo de la base de datos sin confirmación*. Si el candidato proporciona un correo diferente, usar el nuevo correo y actualizar la base de datos.\n    *   Después de validar el correo electrónico, enviar un mensaje de confirmación final que incluya todos los detalles: \"Gracias. Para confirmar: Agendaré tu entrevista para [FECHA Y HORA] y enviaré los detalles a [EMAIL]. ¿Es correcto? Por favor responde 'Sí' para confirmar y proceder con el agendamiento.\"\n6.  **Agendar Entrevista** (solo si hay confirmación de horario *y* correo electrónico válido *y* confirmación final explícita):\n    *   Después de recibir la confirmación final, enviar primero: \"Perfecto. Estoy creando tu agenda en este momento, dame un instante...\"\n    *   Crear el evento en Google Calendar usando la herramienta \"Agendador\".  El título debe seguir el formato: `TALENTO | Entrevista con [Nombre] | [Puesto]`.  Añadir como asistentes: `mia@onbotgo.com`, `talento@onbotgo.com`, y el correo del candidato.  La duración debe ser de 30 minutos.  Generar automáticamente el link de Google Meet.\n    *   Actualizar el estado del candidato en Google Sheets usando la herramienta \"Update Candidate Status\" (estados válidos: `scheduled`, `rescheduled`, `cancelled`, `pending`, `completed`, `error`).\n    *   Después de crear exitosamente el evento, enviar: \"¡Listo! Tu entrevista ha sido agendada exitosamente para [FECHA Y HORA]. Te envié los detalles y el enlace de Google Meet a [EMAIL]. Por favor revisa tu correo y confirma que lo has recibido.\"\n7.  **Confirmar por WhatsApp**:  Enviar un mensaje de confirmación al candidato a través de WhatsApp, incluyendo la fecha, hora y el link de Google Meet.\n8.  **Gestionar Errores**: Si ocurre algún error (ej., el horario ya no está disponible, el correo es inválido), enviar un mensaje apropiado al candidato a través de WhatsApp y, si es posible, ofrecer alternativas.\n9.  **Protocolo de Cancelación y Reagendamiento**: Al detectar una solicitud de cancelación, ofrecer proactivamente la opción de reagendar como primera alternativa antes de proceder con la cancelación definitiva. Utilizar un mensaje como: \"Entiendo que necesitas cancelar tu entrevista programada para [FECHA Y HORA]. ¿Te gustaría reagendarla para otro momento que te resulte más conveniente? Puedo mostrarte algunas opciones disponibles, o si prefieres, podemos proceder con la cancelación.\"\n\n**Format**:\n*   **Tono**: Profesional, cortés y claro. Los mensajes de WhatsApp deben ser concisos y fáciles de entender.\n*   **Output**: Todas las respuestas del agente *deben* ser objetos JSON válidos, siguiendo estrictamente el schema definido en la sección **Scope** -> **Output**. *Nunca* responder con texto plano. Cada respuesta *debe* incluir *todos* los campos requeridos del schema.\n\n**Constraints**:\n*   **Nunca**:\n    *   Agendar una entrevista sin la confirmación *explícita* del horario por parte del candidato. La confirmación debe ser clara e inequívoca.\n    *   Agendar una entrevista sin un correo electrónico *verificado y validado*. No asumir que el correo en la base de datos es correcto sin confirmación del candidato.\n    *   Agendar entrevistas fuera del horario laboral (09:00-18:00 GMT-5).\n    *   Crear un evento en el calendario sin verificar previamente la disponibilidad.\n    *   Exponer información personal o sensible del candidato en los mensajes de WhatsApp.\n    *   Ignorar los flujos alternativos de cancelación y fecha específica.\n    *   Devolver respuestas que no sigan estrictamente el schema definido en la sección **Scope** -> **Output**.\n    *   Dar la impresión de que una entrevista ha sido agendada cuando aún no se ha completado el proceso de agendamiento. Siempre comunicar claramente en qué etapa del proceso se encuentra.\n    *   Proceder con la creación del evento en el calendario sin una confirmación final explícita después de presentar todos los detalles (horario y email).\n    *   Proceder directamente con una cancelación sin ofrecer antes la opción de reagendamiento.\n*   **Siempre**:\n    *   *Comenzar* obteniendo los datos del postulante de Google Sheets.\n    *   *Negociar* la cita en el slot de tiempo mas cercano.\n    *   *Mostrar* opcion de mañana y otra de tarde para la cita.\n    *   Validar la disponibilidad en Google Calendar *antes* de proponer horarios y *antes* de agendar la entrevista.\n    *   Solicitar y *confirmar* el correo electrónico del candidato *después* de acordar el horario de la entrevista. Validar el formato del correo.\n    *   Verificar que cualquier horario propuesto (ya sea por el agente o por el candidato) esté dentro del horario laboral.\n    *   Incluir el link de Google Meet en la confirmación de la entrevista enviada al candidato.\n    *   Mantener el formato estándar del título del evento en Google Calendar.\n    *   Utilizar las herramientas proporcionadas (`Tools`) para interactuar con Google Calendar, Google Sheets y Redis.\n    *   Seguir los `WorkflowSteps` (flujo principal y flujos alternativos).\n    *   Después de validar el email, solicitar una confirmación final explícita presentando todos los detalles (horario y email).\n    *   Informar claramente cuando se está creando el evento (\"Estoy creando tu agenda...\") y cuando se ha completado exitosamente (\"¡Listo! Tu entrevista ha sido agendada...\").\n    *   Ofrecer proactivamente la opción de reagendamiento antes de proceder con una cancelación definitiva.\n\n**Tools:** (Mantenemos la sección Tools tal como la proporcionaste, ya que está completa y bien definida)\n\n*   Agendador\n*   Update Candidate Status\n*   Obtener Datos del Postulante\n*   Obtener Eventos\n*   Validar Disponibilidad\n*   Obtener Trabajo\n*   Redis Chat Memory\n\n**WorkflowSteps**:\n\n*   **MainFlow**:\n    1.  **Obtener Datos del Postulante**: Llamar a \"Obtener Datos del Postulante\".\n    2.  **Analizar Mensaje**: Determinar la acción a seguir (cancelación, fecha específica, confirmación, etc.).\n    3.  **Proponer Disponibilidad** (si es necesario): Consultar y proponer hasta 3 opciones.\n    4.  **Confirmar Horario**: Esperar confirmación explícita.\n    5.  **Solicitar y Validar Email**: Obtener y verificar el correo.\n    6.  **Solicitar Confirmación Final**: Presentar todos los detalles completos y pedir confirmación explícita.\n    7.  **Agendar Entrevista**: Informar que se está procesando, crear evento y actualizar estado.\n    8.  **Confirmar por WhatsApp**: Enviar confirmación de éxito con todos los detalles.\n\n*   **AlternativeFlows**:\n    *   **Cancelación con Oferta de Reagendamiento**:\n        1.  Verificar existencia del evento.\n        2.  Ofrecer proactivamente la opción de reagendamiento mostrando alternativas disponibles.\n        3.  Si el candidato acepta reagendar, proceder con el flujo de reagendamiento.\n        4.  Si el candidato insiste en cancelar, proceder con la cancelación en el calendario.\n        5.  Actualizar estado.\n        6.  Notificar por WhatsApp.\n    *   **Fecha Específica**:\n        1.  Analizar fecha/hora propuesta.\n        2.  Verificar horario laboral.\n        3.  Validar disponibilidad.\n        4.  Si está disponible, continuar con la solicitud de email.\n    *   **Reagendamiento**:\n        1.  Verificar existencia del evento original.\n        2.  Cancelar en el calendario.\n        3.  Actualizar el estado.\n        4.  Proceder con el flujo de agendamiento, *saltándose el paso de obtener datos del postulante, ya que el agente ya los tiene.*\n\n**ResponseFormat**: (Los ejemplos se mantienen, pero se elimina la referencia al schema ya que está inline).\n\n*   **Format**: JSON\n*   **Rules**:\n    *   Siempre devolver el objeto JSON completo según el schema definido en la sección **Scope** -> **Output**.\n    *   Nunca devolver solo el mensaje o texto plano.\n    *   Incluir todos los campos requeridos en cada respuesta.\n    *   Mantener consistencia con los tipos de datos definidos."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1080,
        -280
      ],
      "id": "c1be89b7-f227-4e68-9854-a546ac315a5f",
      "name": "Planificador",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "32ab0507-ea3c-4f80-963c-d8e15d78da79",
              "name": "response",
              "value": "={{ $json.output || $json.error}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1440,
        -280
      ],
      "id": "8d2f4a4f-c5a1-45b4-b6c8-b9f5c67cbc7d",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "{{ $('Execute Workflow Trigger').item.json.query.sessionId }}",
        "sessionTTL": 2880,
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.4,
      "position": [
        920,
        20
      ],
      "id": "fd0c1d1a-cc5d-43b1-b106-cbcc99a46bcf",
      "name": "Redis Chat Memory",
      "credentials": {
        "redis": {
          "id": "FuTe9qrxkR9cRWmA",
          "name": "Automation Redis"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "includeInputFields": true
        }
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        860,
        -280
      ],
      "id": "cf18360a-c47d-478b-8537-e8511c941ef2",
      "name": "Hora Actual"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Creates interview events in the 'TALENTO - MEETS RECLUTAMIENTO' Google Calendar. Use *after* explicitly confirming candidate availability and email. Requires: `start` (ISO 8601), `end` (calculated as `start` + 30 minutes), `candidateEmail`, `eventSummary` ('TALENTO | Interview with [Candidate] | [Job]'), and `eventDescription` (detailed Markdown). Auto-generates a Google Meet link. Adds mia@onbotgo.com, talento@onbotgo.com, and candidate as attendees. *Do NOT use for availability checks; only for event creation after confirmation.*",
        "calendar": {
          "__rl": true,
          "value": "c_41edf5e9b588f7b01bea790394dc1603e03b0cf5f60effee672062a4a66abad6@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "TALENTO - MEETS RECLUTAMIENTO"
        },
        "start": "={{ $fromAI(\"StartMeetDateTime\", \"The start date and time for the interview.  Must be in ISO 8601 format (e.g., 2024-07-24T14:30:00-05:00). Consider the candidate's requested date and time, if provided.  If no specific time is requested, use the heuristic to find the nearest available slot.\", \"string\") }}",
        "end": "={{ $fromAI(\"EndMeetDateTime\", \"The end date and time for the interview.  Must be in ISO 8601 format.  Assume a 30-minute duration from the start time.\", \"string\") }}",
        "useDefaultReminders": false,
        "additionalFields": {
          "attendees": [
            "mia@onbotgo.com",
            "talento@onbotgo.com",
            "={{ $fromAI(\"candidateEmail\", \"The confirmed email address of the candidate.\", \"string\") }}"
          ],
          "conferenceDataUi": {
            "conferenceDataValues": {
              "conferenceSolution": "hangoutsMeet"
            }
          },
          "description": "={{ $fromAI(\"eventDescription\", \"A detailed description of the calendar event. Include the candidate's full name, relevant experience, education, skills, and achievements.  Format the description using Markdown. Start with 'DATOS CANDIDATO', then 'PERFIL PROFESIONAL', then 'DETALLES POSTULACIÓN', and finally 'NOTAS ADICIONALES'. Include the confirmed candidate email and the Meet link if available. Example: \\nDATOS CANDIDATO\\n- Nombre: [nombre_completo]\\n- Ubicación: [ubicacion]\\n- Contacto: [email/telefono]\\n- Email Confirmado: [email]\\n\\nPERFIL PROFESIONAL\\n- Experiencia Relevante: [resumen_experiencia]\\n- Educación: [formacion]\\n- Habilidades Clave: [skills]\\n- Logros Destacados: [achievements]\\n\\nDETALLES POSTULACIÓN\\n- Puesto: [rol]\\n- Pretensión: [salario]\\n- Disponibilidad: [disponibilidad]\\n\\nNOTAS ADICIONALES\\n[observaciones_relevantes]\\n\\nLink Meet: [meet_link]\") }}",
          "summary": "={{ $fromAI(\"eventSummary\", \"A concise summary of the calendar event.  Use the format: 'TALENTO | Entrevista con [Candidate Name] | [Job Title]'.  Example: 'TALENTO | Entrevista con John Doe | Software Engineer'\") }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        1060,
        20
      ],
      "id": "dd5d12bc-3801-4e3f-8ac1-be7635a109ea",
      "name": "Agendador",
      "notesInFlow": false,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "TOuAFMH2lO00Ldog",
          "name": "Google Calendar (Talento)"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Retrieves events from the 'TALENTO - MEETS RECLUTAMIENTO' Google Calendar within a specified time range. Used to check for scheduling availability. Requires `timeMin` and `timeMax` in ISO 8601 format, representing the start and end of the availability check. Returns a list of events with their `summary` and `start.dateTime`. **If no events are returned, it indicates that the time slot is available.**",
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "c_41edf5e9b588f7b01bea790394dc1603e03b0cf5f60effee672062a4a66abad6@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "TALENTO - MEETS RECLUTAMIENTO"
        },
        "options": {
          "timeMin": "={{ $fromAI(\"availabilityCheckStart\", \"The starting date and time to check for calendar availability.  Must be in ISO 8601 format.  This should align with the candidate's requested time, or the start of the 'nearest available slot' heuristic.\", \"string\") }}",
          "timeMax": "={{ $fromAI(\"availabilityCheckEnd\", \"The ending date and time to check for calendar availability.  Must be in ISO 8601 format.  This should align with the candidate's requested time and plus 24 hours, not weekends, or the start of the 'nearest available slot' heuristic.\", \"string\") }}",
          "fields": "=items(summary, start(dateTime))"
        }
      },
      "id": "78c4e785-0ed9-4b39-9f62-357ca7fc617a",
      "name": "Obtener Eventos",
      "type": "n8n-nodes-base.googleCalendarTool",
      "position": [
        1180,
        20
      ],
      "typeVersion": 1.1,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "TOuAFMH2lO00Ldog",
          "name": "Google Calendar (Talento)"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Checks if a specific time slot is available in the 'TALENTO - MEETS RECLUTAMIENTO' Google Calendar. Requires `timeMin` and `timeMax` in ISO 8601 format, defining the start and end of the slot to check. Returns `true` if the slot is available, `false` otherwise.",
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "c_41edf5e9b588f7b01bea790394dc1603e03b0cf5f60effee672062a4a66abad6@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "TALENTO - MEETS RECLUTAMIENTO"
        },
        "timeMin": "={{ $fromAI(\"availabilityCheckStart\", \"The starting date and time to check for calendar availability.  Must be in ISO 8601 format.  This should align with the candidate's requested time, or the start of the 'nearest available slot' heuristic.\", \"string\") }}",
        "timeMax": "={{ $fromAI(\"availabilityCheckEnd\", \"The ending date and time to check for calendar availability.  Must be in ISO 8601 format.  This should align with the candidate's requested start time and plus half hour, or the start of the 'nearest available slot' heuristic.\", \"string\") }}",
        "options": {}
      },
      "id": "274cdeca-5925-47b2-81b3-d927fb5a5148",
      "name": "Validar Disponibilidad",
      "type": "n8n-nodes-base.googleCalendarTool",
      "position": [
        1300,
        20
      ],
      "typeVersion": 1.1,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "TOuAFMH2lO00Ldog",
          "name": "Google Calendar (Talento)"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Updates the candidate's status in the 'apply' sheet of the 'TALENTO | ANUNCIOS' Google Sheet.  Searches for the candidate by WhatsApp number (extracts the number from the sessionId, e.g., '51925797402' from '51925797402@s.whatsapp.net'). Updates the 'status' column with one of: 'scheduled', 'rescheduled', 'cancelled', 'pending', 'completed', 'error'. Also updates the 'email' column, but only if the candidate has explicitly confirmed it.",
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y",
          "mode": "list",
          "cachedResultName": "TALENTO | ANUNCIOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1351684538,
          "mode": "list",
          "cachedResultName": "apply",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit#gid=1351684538"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "phone": "={{ $('Hora Actual').item.json.query.sessionId.split(\"@\")[0] }}",
            "status": "={{ $fromAI('candidateStatusUpdate', 'The updated status of the candidate after the scheduling attempt.  Possible values: scheduled, rescheduled, cancelled, pending, completed, error. Choose the status that accurately reflects the outcome. If the scheduling was successful, use scheduled. If the candidate cancelled, use cancelled. If the event was rescheduled, use rescheduled. If there was a problem, use error. For any intermediate state, use pending.', 'string') }}"
          },
          "matchingColumns": [
            "phone"
          ],
          "schema": [
            {
              "id": "jobId",
              "displayName": "jobId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "applicantName",
              "displayName": "applicantName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "phone",
              "displayName": "phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "documentType",
              "displayName": "documentType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "documentNumber",
              "displayName": "documentNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "cvUrl",
              "displayName": "cvUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        1600,
        20
      ],
      "id": "3a13424f-0e34-4a98-9ab3-1ccbb7ecf042",
      "name": "Update Candidate Status",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zvndgwuBWhe4OoHy",
          "name": "Google sheet Mia"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Retrieves candidate data from the 'apply' sheet of the 'TALENTO | ANUNCIOS' Google Sheet. Searches by WhatsApp number (extracts the number from the sessionId, e.g., '51925797402' from '51925797402@s.whatsapp.net'). **The email returned is only a suggestion; do not use it for scheduling unless the candidate explicitly confirms they want to receive the meeting invite at that address.**",
        "documentId": {
          "__rl": true,
          "value": "1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y",
          "mode": "list",
          "cachedResultName": "TALENTO | ANUNCIOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1351684538,
          "mode": "list",
          "cachedResultName": "apply",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit#gid=1351684538"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "phone",
              "lookupValue": "={{ $('Execute Workflow Trigger').item.json.query.sessionId.split(\"@\")[0] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        1440,
        20
      ],
      "id": "3c021f9e-6a25-4938-abdc-ced41cdcfd51",
      "name": "Obtener Datos del Postulante",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zvndgwuBWhe4OoHy",
          "name": "Google sheet Mia"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Updates the candidate's email in the 'apply' sheet of the 'TALENTO | ANUNCIOS' Google Sheet. Searches for the candidate by WhatsApp number (extracts the number from the sessionId, e.g., '51925797402' from '51925797402@s.whatsapp.net'). Updates the 'email' column when the candidate explicitly confirms a different email.",
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y",
          "mode": "list",
          "cachedResultName": "TALENTO | ANUNCIOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1351684538,
          "mode": "list",
          "cachedResultName": "apply",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit#gid=1351684538"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "phone": "={{ $('Hora Actual').item.json.query.sessionId.split(\"@\")[0] }}",
            "email": "={{ $fromAI('candidateConfirmedEmail', 'The email address that the candidate explicitly confirmed to use for the meeting invitation. Only include this if the candidate has explicitly confirmed their email address.', 'string') }}"
          },
          "matchingColumns": [
            "phone"
          ],
          "schema": [
            {
              "id": "jobId",
              "displayName": "jobId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "applicantName",
              "displayName": "applicantName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "phone",
              "displayName": "phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "documentType",
              "displayName": "documentType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "documentNumber",
              "displayName": "documentNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "cvUrl",
              "displayName": "cvUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        1760,
        20
      ],
      "id": "970c684e-07d1-4dde-9136-3e9d83e8951c",
      "name": "Update Candidate Email",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zvndgwuBWhe4OoHy",
          "name": "Google sheet Mia"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y",
          "mode": "list",
          "cachedResultName": "TALENTO | ANUNCIOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 2129097737,
          "mode": "list",
          "cachedResultName": "jobs",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit#gid=2129097737"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "id",
              "lookupValue": "={{ $json.query.jobId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        140,
        -400
      ],
      "id": "af92d194-d14f-449f-b6ae-3ba81a7e8605",
      "name": "buscar job",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zvndgwuBWhe4OoHy",
          "name": "Google sheet Mia"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9aac8716-f825-4c91-aaa9-2d30b438d104",
              "leftValue": "={{ $json.scheduleType }}",
              "rightValue": "=Open",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        500,
        -400
      ],
      "id": "4fdb0ce1-038e-4a5a-a94b-d56f454e345d",
      "name": "If"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.toJsonString() }}",
        "options": {
          "systemMessage": "=# Sistema Prompt Actualizado - Agente de Incorporación a Slots de Entrevista\n\n## Rol del Agente\nProcesador de Incorporación de Candidatos a Slots de Entrevista: Componente automatizado que valida información de candidatos, confirma explícitamente sus datos de contacto, y los añade como asistentes a slots de entrevista ya existentes en Google Calendar, devolviendo exclusivamente respuestas JSON estructuradas.\n\n## Instrucciones de Procesamiento\n\n### Entrada (XML Format)\nEl agente recibe datos en formato XML con la siguiente estructura:\n```xml\n<userQuery>\n  <sessionId>[ID de WhatsApp del candidato]</sessionId>\n  <taskId>[ID único de la tarea]</taskId>\n  <message>[Mensaje del candidato]</message>\n  <agentType>[scheduler/canceller]</agentType>\n  <jobId>[ID del trabajo]</jobId>\n  <slot>\n    <eventId>[ID del evento en Google Calendar]</eventId>\n    <startTime>[Hora de inicio en formato ISO]</startTime>\n    <endTime>[Hora de fin en formato ISO]</endTime>\n    <meetLink>[Enlace de Google Meet]</meetLink>\n  </slot>\n  <context>\n    <currentStage>[Etapa actual: query/email_confirmation/scheduling/completed/cancelled]</currentStage>\n    <lastInteraction>[Timestamp de la última interacción]</lastInteraction>\n  </context>\n  <currentDate>[Fecha y hora actual]</currentDate>\n</userQuery>\n```\n\n### Salida (JSON Format)\n```json\n{\n  \"sessionId\": \"[ID de WhatsApp del candidato]\",\n  \"task_id\": \"[ID de la tarea]\",\n  \"status\": \"[success/error/pending]\",\n  \"result\": {\n    \"calendar_event\": {\n      \"id\": \"[ID del evento]\",\n      \"attendee_added\": {\n        \"email\": \"[Email del candidato]\",\n        \"displayName\": \"[Nombre del candidato]\",\n        \"responseStatus\": \"needsAction\"\n      },\n      \"event_details\": {\n        \"date\": \"[Fecha formateada]\",\n        \"time\": \"[Hora formateada]\",\n        \"meet_link\": \"[Enlace de Google Meet]\"\n      },\n      \"status\": \"confirmed\"\n    },\n    \"response\": {\n      \"message\": \"[Mensaje detallado para el candidato]\",\n      \"validation_status\": \"[valid/invalid/pending]\"\n    }\n  }\n}\n```\n\n## Flujo de Trabajo\n\n1. **Obtener Datos del Postulante**: Usar \"Obtener Datos del Postulante1\" con el sessionId.\n\n2. **Procesar según Etapa Actual**:\n   \n   - Si `currentStage` es \"query\":\n     - Formatear startTime y endTime para presentarlos de manera amigable.\n     - Solicitar confirmación explícita: \"¿Te interesa participar en esta entrevista para [FECHA] a las [HORA]? Por favor confirma con un 'Sí'.\"\n     - Mencionar que \"recibirá el enlace de acceso una vez confirme su participación y correo electrónico\".\n     - Si rechaza, actualizar estado a \"Candidato rechaza la propuesta\" con \"Update Candidate Status1\".\n   \n   - Si `currentStage` es \"email_confirmation\":\n     - Verificar si el mensaje contiene un correo electrónico. Si lo contiene, validar su formato.\n     - Si no contiene un correo, solicitar explícitamente: \"Por favor, comparte tu correo electrónico para enviarte la invitación.\"\n     - Si hay un correo válido, usar \"Update Candidate Email1\" para actualizarlo.\n     - Solicitar confirmación final: \"Confirmo que te agregaré a la entrevista para [FECHA] a las [HORA]. La invitación se enviará a [EMAIL]. ¿Es correcto? Por favor responde 'Sí' para confirmar.\"\n     - Mencionar que \"recibirá el enlace de acceso una vez confirme esta información\".\n   \n   - Si `currentStage` es \"scheduling\" y hay confirmación:\n     - Usar \"Agendador1\" para agregar al candidato como asistente, proporcionando eventId y correo confirmado.\n     - Actualizar estado a \"Invitación para la entrevista enviada\" con \"Update Candidate Status1\".\n     - **SOLO AHORA** generar mensaje de confirmación incluyendo fecha, hora y link de Meet.\n\n3. **En caso de Cancelación** (cuando agentType es \"canceller\"):\n   - Actualizar estado a \"Candidato rechaza la propuesta\" con \"Update Candidate Status1\".\n   - Generar mensaje de confirmación de cancelación.\n\n## Estados de Candidato\n- **Invitación para la entrevista enviada**: El candidato ha sido agregado exitosamente como asistente al evento.\n- **Candidato rechaza la propuesta**: El candidato ha rechazado la invitación o no ha podido ser agregado.\n\n## Herramientas Disponibles\n\n1. **Obtener Datos del Postulante1**: Obtiene información del candidato usando el sessionId (número de WhatsApp).\n\n2. **Update Candidate Status1**: Actualiza el estado del candidato en Google Sheets con los valores: \"Invitación para la entrevista enviada\" o \"Candidato rechaza la propuesta\", dependiendo del resultado final del proceso.\n\n3. **Update Candidate Email1**: Actualiza el correo del candidato en Google Sheets.\n\n4. **Agendador1**: Agrega candidatos como asistentes a eventos existentes en Google Calendar.\n\n5. **Redis Chat Memory1**: Mantiene el estado de la conversación.\n\n## Reglas Críticas\n\n### Nunca\n- Agregar un candidato sin validación explícita del correo electrónico.\n- Agregar un candidato sin confirmación explícita final.\n- Omitir detalles del evento en la respuesta final.\n- Devolver respuestas que no sigan el formato JSON requerido.\n\n### Siempre\n- Formatear fechas/horas ISO a un formato amigable (ejemplo: \"8 de marzo de 2025 a las 13:00\").\n- Validar explícitamente el correo electrónico antes de agregarlo como asistente.\n- Incluir todos los detalles (fecha, hora, link de Meet, correo) en mensajes de confirmación.\n- Seguir el flujo: query → email_confirmation → scheduling → completed.\n- Usar la herramienta correcta para cada operación según lo especificado.\n- Actualizar correctamente el estado del candidato en cada etapa del proceso.\n\n### Mensaje de Confirmación Final Exitosa\n\"¡Listo! Has sido agregado a la entrevista para [FECHA] a las [HORA]. Te envié los detalles y el enlace de Google Meet ([MEET_LINK]) a tu correo [EMAIL]. Por favor revisa tu correo y confirma que lo has recibido.\"\n\n---\n\nNota: Este agente es un componente de procesamiento dentro de un sistema multiagente. No envía mensajes directamente a WhatsApp, sino que genera respuestas JSON estructuradas que serán manejadas por otros componentes."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        2400,
        -820
      ],
      "id": "0d0a06c8-0303-4595-8e85-bebe5e3bd404",
      "name": "Planificador1",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "32ab0507-ea3c-4f80-963c-d8e15d78da79",
              "name": "response",
              "value": "={{ $json.output || $json.error}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2760,
        -820
      ],
      "id": "5fac245d-529f-4600-856d-804638cc06b7",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "{{ $('Execute Workflow Trigger').item.json.query.sessionId }}",
        "sessionTTL": 2880,
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.4,
      "position": [
        2200,
        -580
      ],
      "id": "3cbf4665-c583-424b-a180-08e9ff34d39c",
      "name": "Redis Chat Memory1",
      "credentials": {
        "redis": {
          "id": "FuTe9qrxkR9cRWmA",
          "name": "Automation Redis"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "includeInputFields": true
        }
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        2200,
        -820
      ],
      "id": "6d7f0a6e-e09a-4494-a398-6a761a52c752",
      "name": "Hora Actual1"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "=Updates the candidate's status in the 'apply' sheet of the 'TALENTO | ANUNCIOS' Google Sheet.  Searches for the candidate by WhatsApp number (extracts the number from the sessionId, e.g., '51925797402' from '51925797402@s.whatsapp.net'). Updates the 'status' column. Also updates the 'email' column, but only if the candidate has explicitly confirmed it.",
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y",
          "mode": "list",
          "cachedResultName": "TALENTO | ANUNCIOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1351684538,
          "mode": "list",
          "cachedResultName": "apply",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit#gid=1351684538"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "phone": "={{ $('Execute Workflow Trigger').item.json.query.sessionId.split(\"@\")[0] }}",
            "status": "={{ $fromAI('candidateStatusUpdate', 'El estado actualizado del candidato después del intento de agendamiento. Solo hay dos posibles valores: \"Candidato acepta la propuesta\" (si el candidato ha sido agregado exitosamente como asistente al evento) o \"Candidato rechaza la propuesta\" (si el candidato rechazó la invitación o no pudo ser agregado). Selecciona el estado que corresponda según el resultado final del proceso.', 'string') }}"
          },
          "matchingColumns": [
            "phone"
          ],
          "schema": [
            {
              "id": "jobId",
              "displayName": "jobId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "applicantName",
              "displayName": "applicantName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "phone",
              "displayName": "phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "documentType",
              "displayName": "documentType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "documentNumber",
              "displayName": "documentNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "cvUrl",
              "displayName": "cvUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        2700,
        -580
      ],
      "id": "280371a2-a73d-45d9-83c5-9fd5f880c4f1",
      "name": "Update Candidate Status1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zvndgwuBWhe4OoHy",
          "name": "Google sheet Mia"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Retrieves candidate data from the 'apply' sheet of the 'TALENTO | ANUNCIOS' Google Sheet. Searches by WhatsApp number (extracts the number from the sessionId, e.g., '51925797402' from '51925797402@s.whatsapp.net'). **The email returned is only a suggestion; do not use it for scheduling unless the candidate explicitly confirms they want to receive the meeting invite at that address.**",
        "documentId": {
          "__rl": true,
          "value": "1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y",
          "mode": "list",
          "cachedResultName": "TALENTO | ANUNCIOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1351684538,
          "mode": "list",
          "cachedResultName": "apply",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit#gid=1351684538"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "phone",
              "lookupValue": "={{ $('Execute Workflow Trigger').item.json.query.sessionId.split(\"@\")[0] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        2540,
        -580
      ],
      "id": "5b59def8-63d2-4688-b3ff-fdd500d1d80d",
      "name": "Obtener Datos del Postulante1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zvndgwuBWhe4OoHy",
          "name": "Google sheet Mia"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Updates the candidate's email in the 'apply' sheet of the 'TALENTO | ANUNCIOS' Google Sheet. Searches for the candidate by WhatsApp number (extracts the number from the sessionId, e.g., '51925797402' from '51925797402@s.whatsapp.net'). Updates the 'email' column when the candidate explicitly confirms a different email.",
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y",
          "mode": "list",
          "cachedResultName": "TALENTO | ANUNCIOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1351684538,
          "mode": "list",
          "cachedResultName": "apply",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eWoRhXJ_fLkJ0qRzrx37f7CRcjXzt3HPfQKVL3vwV7Y/edit#gid=1351684538"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "phone": "={{ $('Hora Actual1').item.json.query.sessionId.split(\"@\")[0] }}",
            "email": "={{ $fromAI('candidateConfirmedEmail', 'The email address that the candidate explicitly confirmed to use for the meeting invitation. Only include this if the candidate has explicitly confirmed their email address.', 'string') }}"
          },
          "matchingColumns": [
            "phone"
          ],
          "schema": [
            {
              "id": "jobId",
              "displayName": "jobId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "applicantName",
              "displayName": "applicantName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "phone",
              "displayName": "phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "documentType",
              "displayName": "documentType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "documentNumber",
              "displayName": "documentNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "cvUrl",
              "displayName": "cvUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        2860,
        -580
      ],
      "id": "6a4ee830-2081-4459-999f-789bd4702d01",
      "name": "Update Candidate Email1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zvndgwuBWhe4OoHy",
          "name": "Google sheet Mia"
        }
      }
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "start.dateTime"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1540,
        -820
      ],
      "id": "a782702f-dcff-487b-af97-2c90cb885ecc",
      "name": "Ordena_El_Más_Próximo"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1760,
        -820
      ],
      "id": "1384be68-99a0-4b4a-883e-8d7a19bf5701",
      "name": "Limita_a_1_evento"
    },
    {
      "parameters": {
        "content": "## agenda cerrado\n",
        "height": 440,
        "width": 2300,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        700,
        -860
      ],
      "typeVersion": 1,
      "id": "f1f330fc-8e6f-4b17-b11a-477e62a243c5",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## agenda abierto\n",
        "height": 520,
        "width": 1200,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        700,
        -340
      ],
      "typeVersion": 1,
      "id": "249df375-2bf6-41b4-bab5-cd4ad2ecadb9",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "c_41edf5e9b588f7b01bea790394dc1603e03b0cf5f60effee672062a4a66abad6@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "TALENTO - MEETS RECLUTAMIENTO"
        },
        "returnAll": true,
        "options": {
          "timeMin": "={{ $now.plus(1,'hour') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.2,
      "position": [
        860,
        -820
      ],
      "id": "2ee68b51-582f-4d8c-968a-20748e2a4916",
      "name": "Obtiene_Si_Hay_Calendario",
      "alwaysOutputData": true,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "TOuAFMH2lO00Ldog",
          "name": "Google Calendar (Talento)"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        2000,
        -580
      ],
      "id": "5702ef67-fb3b-4940-8bb9-dee98b848bb7",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "OCSh6LOFwE2dci45",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "=Adds candidates as attendees to existing interview slots in the 'TALENTO - MEETS RECLUTAMIENTO' Google Calendar. Use after explicitly confirming candidate participation and validating their email. Requires: eventId (from the existing slot), candidateEmail (validated format), and candidateName. Maintains the existing Google Meet link generated for the slot. Updates the event by adding the candidate as an attendee alongside the existing attendees (mia@onbotgo.com and talento@onbotgo.com). Do NOT use for availability checks; only for adding attendees after explicit confirmation. Returns updated event details including the Google Meet link that should be shared with the candidate.",
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "c_41edf5e9b588f7b01bea790394dc1603e03b0cf5f60effee672062a4a66abad6@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "TALENTO - MEETS RECLUTAMIENTO"
        },
        "eventId": "={{ $fromAI(\"slotId\") }}",
        "useDefaultReminders": false,
        "updateFields": {
          "attendeesUi": {
            "values": {
              "attendees": [
                "={{ $fromAI(\"candidateEmail\", \"The confirmed email address of the candidate.\", \"string\") }}"
              ]
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        2380,
        -580
      ],
      "id": "d3801cda-8eda-48d3-8e3c-780f0258d960",
      "name": "Agendador1",
      "notesInFlow": false,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "TOuAFMH2lO00Ldog",
          "name": "Google Calendar (Talento)"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "79818c76-a126-4203-9b7a-dde270243ae1",
              "leftValue": "={{ $('If').item.json.id }}",
              "rightValue": "={{ $json.summary }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1080,
        -820
      ],
      "id": "489752c0-d162-4ccf-8d95-26e70b41794f",
      "name": "Filter1",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Obtener datos de la entrada\nconst inputData = $input.item.json;\nconst executeTrigger = $('Execute Workflow Trigger').item.json.query;\n\n// Extraer datos del slot (asumiendo que $json contiene toda la información del slot)\n// Si $json es el objeto completo del slot, necesitamos extraer solo lo que necesitamos\nlet slotData;\ntry {\n  // Verificar si el slot es un string JSON o un objeto\n  if (typeof inputData === 'string') {\n    slotData = JSON.parse(inputData);\n  } else {\n    slotData = inputData;\n  }\n  \n  // Extraer solo los campos necesarios del slot\n  const simplifiedSlot = {\n    eventId: slotData.id || '',\n    startTime: slotData.start?.dateTime || '',\n    endTime: slotData.end?.dateTime || '',\n    meetLink: slotData.hangoutLink || ''\n  };\n  \n  // Crear el XML como string\n  const xmlPrompt = `\n<userQuery>\n  <sessionId>${executeTrigger.sessionId}</sessionId>\n  <taskId>${executeTrigger.task_id}</taskId>\n  <message>${executeTrigger.message}</message>\n  <agentType>${executeTrigger.agent_type}</agentType>\n  <jobId>${executeTrigger.jobId}</jobId>\n  <slot>\n    <eventId>${simplifiedSlot.eventId}</eventId>\n    <startTime>${simplifiedSlot.startTime}</startTime>\n    <endTime>${simplifiedSlot.endTime}</endTime>\n    <meetLink>${simplifiedSlot.meetLink}</meetLink>\n  </slot>\n  <context>\n    <currentStage>${executeTrigger.context.current_stage}</currentStage>\n    <lastInteraction>${executeTrigger.context.last_interaction}</lastInteraction>\n  </context>\n  <currentDate>${new Date().toISOString()}</currentDate>\n</userQuery>\n`;\n\n  // Devolver el XML como resultado\n  return {\n    json: {\n      xmlPrompt: xmlPrompt\n    }\n  };\n  \n} catch (error) {\n  // Manejar errores\n  return {\n    json: {\n      error: true,\n      message: 'Error al procesar los datos: ${error.message}',\n      originalData: inputData\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1980,
        -820
      ],
      "id": "760c3c50-656f-4be9-8f52-1645d401ff0d",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fe2184ba-7f19-4fe0-bec0-e3c00507c93d",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1300,
        -820
      ],
      "id": "067de0d4-7bdb-47ae-9a60-3f7bb54e10b8",
      "name": "If1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b54e8f1f-085a-4cc4-ba53-52e2e218e5fc",
              "name": "Cel_a_contactar",
              "value": "51934474263",
              "type": "string"
            },
            {
              "id": "db251299-0f99-4933-ae88-45766d4eb8c2",
              "name": "Nombre_a_contactar",
              "value": "Zoila",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        860,
        -600
      ],
      "id": "5a3c3fb4-a21f-4768-99e0-28dcf7cfb305",
      "name": "Datos_de_Contactado",
      "executeOnce": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "041203e9-0016-4701-88b5-0fb6a1de03a5",
              "name": "Mensaje",
              "value": "=Estimado/a {{ $json.Nombre_a_contactar }},\n\nHemos notado que no se encuentra ningún agendamiento masivo para el día de hoy. Le informamos que intentaremos nuevamente en 10 minutos. Agradecemos su atención y paciencia.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1080,
        -600
      ],
      "id": "c1a703af-962f-4fe8-85a2-8c80f2c479b6",
      "name": "Mensaje",
      "executeOnce": true
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "=BJ",
        "remoteJid": "={{ $('Datos_de_Contactado').item.json.Cel_a_contactar }}",
        "messageText": "={{ $json.Mensaje }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        1300,
        -600
      ],
      "id": "188366af-eddc-4d9a-8f90-8e15134592d5",
      "name": "Envia_mensaje",
      "credentials": {
        "evolutionApi": {
          "id": "t4TvwUFJqLA4AgmQ",
          "name": "Evolution account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7c3cf8c8-6b6b-439e-8082-5c0042d88be6",
              "name": "response",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1520,
        -600
      ],
      "id": "85bdec33-da2f-42bf-ae3b-f6af362bd61d",
      "name": "Response"
    },
    {
      "parameters": {
        "content": "## Tipo de agenda\nAgenda cerrada: es porque el promocionador anunciante o reclutador. va a agendar un espacio especifico en un momento específico.\n\nAbierto: Cuando van a contratar a personas de otro perfil y negocian un momento de espacio para disponibilidad mutua y entonces se agenda.",
        "height": 180,
        "width": 680,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1940,
        -340
      ],
      "typeVersion": 1,
      "id": "1df0fddd-993b-427c-9b9b-2be3928305d9",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## I'm a note \n{\\n  \"sessionId\": \"51934474269@s.whatsapp.net\",\\n  \"task_id\": \"1iju94ud3rgs828su06gk3ak8h3hqeo\",\\n  \"status\": \"error\",\\n  \"result\": {\\n    \"calendar_event\": {\\n      \"id\": \"0hir0vem7g7mqorb9i8u2kk2j8\",\\n      \"attendee_added\": {\\n        \"email\": \"\",\\n        \"displayName\": \"\",\\n        \"responseStatus\": \"\"\\n      },\\n      \"event_details\": {\\n        \"date\": \"10 de marzo de 2025\",\\n        \"time\": \"17:00\",\\n        \"meet_link\": \"\"\\n      },\\n      \"status\": \"cancelled\"\\n    },\\n    \"response\": {\\n      \"message\": \"Lamentablemente, no se pudo encontrar la información del candidato y se ha actualizado el estado a 'Candidato rechaza la propuesta'.\",\\n      \"validation_status\": \"invalid\"\\n    }\\n  }\\n}",
        "height": 300,
        "width": 680
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1940,
        -120
      ],
      "typeVersion": 1,
      "id": "2deccf36-8929-4e37-a499-ceb2385650be",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "jsCode": "// Obtener el input de los nodos anteriores\nconst output = $input.all();\n\n// Iterar sobre cada uno de los items de entrada\nconst result = output.map(item => {\n    // Extraemos la información del mensaje y del contexto del output\n    const message = item.json.response.data.message.conversation;\n    const context = item.json.response.data.contextInfo; // Puede ser null\n    const remoteJid = item.json.response.data.key.remoteJid;\n    const fromMe = item.json.response.data.key.fromMe;\n    const messageId = item.json.response.data.key.id;\n    const instanceId = item.json.response.data.instanceId;\n    const status = item.json.response.data.status;\n    const timestamp = item.json.response.data.messageTimestamp;\n\n    // Devolver la estructura que se necesita\n    return {\n        json: {\n            sessionId: remoteJid,\n            task_id: messageId,\n            message: message,\n            agent_type: \"guide\", // Este valor puede depender del contexto\n            context: {\n                current_stage: \"query\", // Este valor puede ser calculado o pasado\n                last_interaction: new Date(timestamp * 1000).toISOString() // Convertir el timestamp a formato ISO\n            }\n        }\n    };\n});\n\n// Retornar el nuevo objeto formateado\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1740,
        -600
      ],
      "id": "3c32165e-cedc-4063-9b0b-c8d682752201",
      "name": "Parsea Datos"
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "query": {
            "sessionId": "51934474269@s.whatsapp.net",
            "task_id": "1iju94ud3rgs828su06gk3ak8h3hqeo",
            "message": "a que hora sería la entrevista?",
            "agent_type": "scheduler",
            "jobId": "JOB001",
            "context": {
              "current_stage": "query",
              "last_interaction": "2023-10-02T12:00:00Z"
            }
          }
        }
      }
    ]
  },
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "buscar job",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Planificador",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Planificador": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Planificador",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Hora Actual": {
      "main": [
        [
          {
            "node": "Planificador",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agendador": {
      "ai_tool": [
        [
          {
            "node": "Planificador",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Obtener Eventos": {
      "ai_tool": [
        [
          {
            "node": "Planificador",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Validar Disponibilidad": {
      "ai_tool": [
        [
          {
            "node": "Planificador",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Obtener Datos del Postulante": {
      "ai_tool": [
        [
          {
            "node": "Planificador",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Candidate Status": {
      "ai_tool": [
        [
          {
            "node": "Planificador",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Candidate Email": {
      "ai_tool": [
        [
          {
            "node": "Planificador",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "buscar job": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Obtiene_Si_Hay_Calendario",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Hora Actual",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planificador1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "Planificador1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Hora Actual1": {
      "main": [
        [
          {
            "node": "Planificador1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Candidate Status1": {
      "ai_tool": [
        [
          {
            "node": "Planificador1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Obtener Datos del Postulante1": {
      "ai_tool": [
        [
          {
            "node": "Planificador1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Candidate Email1": {
      "ai_tool": [
        [
          {
            "node": "Planificador1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Ordena_El_Más_Próximo": {
      "main": [
        [
          {
            "node": "Limita_a_1_evento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limita_a_1_evento": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtiene_Si_Hay_Calendario": {
      "main": [
        [
          {
            "node": "Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Planificador1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Agendador1": {
      "ai_tool": [
        [
          {
            "node": "Planificador1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Filter1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Hora Actual1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Ordena_El_Más_Próximo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Datos_de_Contactado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Datos_de_Contactado": {
      "main": [
        [
          {
            "node": "Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mensaje": {
      "main": [
        [
          {
            "node": "Envia_mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Envia_mensaje": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response": {
      "main": [
        [
          {
            "node": "Parsea Datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Lima",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "897a1957-76ec-42a9-aae8-6eefdc1f1499",
  "meta": {
    "instanceId": "1dae253b8ed4fa2ae6cc1a1b54e20169a0e4eef838c1eca58506dcd1699582a0"
  },
  "id": "VKDgm66N4EyRHwS3",
  "tags": []
}